import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

const questions = [
  {
    id: 1,
question: "What does SDK stand for?",
options: [
  "Software Development Kit", 
  "System Design Knowledge",
  "Standard Data Key",
  "Secure Deployment Kit"
],
    answer: "Software Development Kit",
  },
  {
    id: 2,
question: "What is the effect of setting the `is_enabled` parameter to false in Tools?",
options: [
  "The tool animates faster",
  "The tool is skipped and not sent to the LLM",
  "The tool logs additional debug info",
  "The tool is automatically converted to a default tool"
],
answer: "The tool is skipped and not sent to the LLM"
  },
  {
    id: 3,
question: "Which function is responsible for running a single turn in the agent loop?",
options: [
  "_execute_agent_cycle",
  "_process_tool_invocation",
  "_run_single_turn",       
  "_loop_iteration"
],
answer: "_run_single_turn"
},{
    id: 4,
question: "What is the primary purpose of Swarm in the OpenAI SDK?",
options: [
  "Experimental framework for developing AI agents",  // ✅ correct
  "Database management and optimization",
  "UI/UX design for agent dashboards",
  "Automated deployment of models"
],
answer: "Experimental framework for developing AI agents"},
  {
    id: 5,
question: "If there are 4 agents with their respective input and output guardrails, and the handoff sequence is: Agent 1 → Agent 4 → Agent 3 → Agent 2, which guardrails are applied during the process?",
options: [
  "Agent 1's input guardrail and Agent 4's output guardrail",
  "Agent 1's input guardrail and Agent 2's output guardrail", 
  "Agent 4's input guardrail and Agent 2's output guardrail",
  "Agent 3's input guardrail and Agent 2's output guardrail"
],
answer: "Agent 1's input guardrail and Agent 2's output guardrail"
  },
  {
    id: 6,
    question: "In the OpenAI SDK, what is the parent class of all agent-related exceptions?",
options: [
  "OpenAIError",
  "ToolError",
  "BaseException",
  "AgentException",        
],
answer: "AgentException"
  },
{
  id: 7,
  question: "How do input guardrails operate during streaming in the OpenAI SDK?",
  options: [
    "Streaming starts first, then input guardrails run; exceptions are ignored",
    "Input guardrails start execution, and response streaming begins simultaneously; if a guardrail raises an exception, an error is thrown", 
    "Input guardrails run only after all response chunks are received",
    "Streaming completes fully before input guardrails are checked"
  ],
  answer: "Input guardrails start execution, and response streaming begins simultaneously; if a guardrail raises an exception, an error is thrown"
},
  {
    id: 8,
    question: "In an agent loop, if `reset_tool_choice=False` and `tool_choice='required'`, what happens?",
options: [
  "The agent loop continues until a MaxTurnsExceededError occurs", 
  "The agent immediately stops without executing any tools",
  "The agent skips the current turn and proceeds to the next",
  "The agent resets tool_choice automatically and continues indefinitely"
],
answer: "The agent loop continues until a MaxTurnsExceededError occurs"
  },
  {
    id: 9,
    question: "Why would you use `set_tracing_disabled(disabled=True)` in the OpenAI SDK?",
options: [
  "To speed up the agent execution by skipping tool calls",
  "To enable detailed debugging and verbose logging in the terminal",
  "To automatically reset all agent guardrails between turns",
  "To prevent logs from being sent to the OpenAI dashboard and suppress terminal warnings", 
],
answer: "To prevent logs from being sent to the OpenAI dashboard and suppress terminal warnings"
  },
  {
    id: 10,
    question: "In `ModelSettings`, what is the effect of setting `truncation='disabled'`?",
options: [
  "The model truncates all output after a fixed number of tokens",
  "The model shortens inputs to fit the context window",
  "The model generates long responses without cutting off previous text", 
  "The model stops generating text at the first sentence"
],
answer: "The model generates long responses without cutting off previous text"
  },
  {
    id: 11,
question: "What is the purpose of `prompt` in the OpenAI SDK?",
options: [
  "It stores the final response generated by the model",
  "It configures the agent's execution speed and memory usage",
  "It provides an instruction, which can be dynamic and include variables, and can be fetched from the OpenAI dashboard",
  "It automatically applies guardrails to all tools"
],
answer: "It provides an instruction, which can be dynamic and include variables, and can be fetched from the OpenAI dashboard"
  },
  {
    id: 12,
    question: "In the OpenAI SDK, what is the effect of setting `strict_mode=False`?",
options: [
  "The LLM can return incorrect or incomplete schemas; optional fields you provide might be ignored because they are not required",
  "The LLM will strictly enforce all schema rules and never skip fields",
  "The LLM disables all input guardrails and runs tools freely",
  "The LLM always generates verbose debug logs for every response"
],
answer: "The LLM can return incorrect or incomplete schemas; optional fields you provide might be ignored because they are not required",
  },
  {
    id: 13,
    question: "What happens if you call `handoff()` without providing an input type, but `on_handoff` is defined with parameters `ctx` and `input`?",
options: [
  "The handoff silently ignores the missing input type and proceeds",
  "The agent automatically infers the input type from context",
  "A `UserError` is raised: 'on_handoff must take two arguments: context and input'",
  "The handoff executes, but logs a warning in the terminal"
],
answer: "A `UserError` is raised: 'on_handoff must take two arguments: context and input'"
  },
  {
    id: 14,
question: "What is the main difference between a standard Python `dataclass` and a `Pydantic` model?",
options: [
  "Dataclass performs automatic type validation, Pydantic does not",
  "Both dataclass and Pydantic automatically generate API endpoints",
  "Pydantic reduces boilerplate like dataclass but also performs validation on fields",
  "Pydantic cannot be used with type annotations, dataclass can"
],
answer: "Pydantic reduces boilerplate like dataclass but also performs validation on fields"
  },
  {
    id: 15,
    question: "If `max_turns` is set to 1 and you provide a query that requires a tool call, what happens?",
options: [
  "The agent ignores the max_turns setting and executes the tool anyway",
  "A `MaxTurnsExceeded Error` is raised because the agent cannot execute another turn", 
  "The tool call is queued for the next iteration without error",
  "The agent skips the tool call and returns an empty response"
],
answer: "A `MaxTurnsExceeded Error` is raised because the agent cannot execute another turn"
  },
  {
    id: 16,
    question: "What is the effect of `trace_include_sensitive_data=False` in the OpenAI SDK?",
options: [
  "Outputs from tools, guardrails, and handoffs are not sent to traces, but spans are still created",
  "All outputs, including sensitive data, are fully logged in traces",
  "No spans are created at all",
  "Only guardrail outputs are included in traces, others are skipped"
],
answer: "Outputs from tools, guardrails, and handoffs are not sent to traces, but spans are still created"
  },
  {
    id: 17,
    question: "What happens if an error occurs during an LLM call inside a `function_tool`?",
options: [
  "The error is silently ignored and the tool completes successfully",
  "The error is sent back to the LLM, which generates a meaningful message about it",
  "The agent immediately stops without returning any message",
  "The tool retries automatically without involving the LLM"
],
answer: "The error is sent back to the LLM, which generates a meaningful message about it"
  },
  {
    id: 18,
    question: "How many types of model providers exist in the OpenAI SDK, and what are they?",
options: [
  "Two: OpenAIChatCompletionsModel and OpenAIResponsesModel",
  "Four: OpenAIChatCompletionsModel, OpenAIResponsesModel, LiteLLMModel, and GPTModel",
  "Three: OpenAIChatCompletionsModel, OpenAIResponsesModel, and LiteLLMModel",  
  "One: OpenAIChatCompletionsModel only"
],
answer: "Three: OpenAIChatCompletionsModel, OpenAIResponsesModel, and LiteLLMModel"
  },
  {
    id: 19,
    question: "What is the purpose of `custom_output_extractor` in `as_tool`?",
options: [
  "It automatically validates all tool inputs before execution",
  "It allows you to customize how a `RunResult` from an agent run is processed", 
  "It disables input and output guardrails for the tool",
  "It forces the tool to ignore any errors during execution"
],
answer: "It allows you to customize how a `RunResult` from an agent run is processed"
  },
  {
    id:20,
    question: "How did you find this demo quiz?",
options: [
  "Very helpful and clear",  
  "Very helpful and clear",
  "Very helpful and clear",
  "Very helpful and clear"
],
answer: "Very helpful and clear"

  }
];

export default function Quiz() {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState(null);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(25);
  const [finished, setFinished] = useState(false);
  const [isStarted, setIsStarted] = useState(false);
  const [timeUp, setTimeUp] = useState(false);
  const [showResults, setShowResults] = useState(false);

  useEffect(() => {
    if (!isStarted || finished || timeUp) return;
    
    if (timeLeft === 0) {
      setTimeUp(true);
      // Auto submit current question if time runs out
      if (selected) {
        setAnswers({ ...answers, [questions[current].id]: selected });
      }
      
      // Move to next question or finish quiz
      setTimeout(() => {
        if (current < questions.length - 1) {
          setCurrent(current + 1);
          setTimeLeft(60);
          setTimeUp(false);
          setSelected(null);
        } else {
          setFinished(true);
          setShowResults(true);
        }
      }, 2000);
      return;
    }
    
    const timer = setInterval(() => setTimeLeft((t) => t - 1), 1000);
    return () => clearInterval(timer);
  }, [timeLeft, finished, isStarted, timeUp, current, selected, answers]);

  const handleStart = () => {
    setIsStarted(true);
    setTimeLeft(60);
  };

  const handleConfirm = () => {
    setAnswers({ ...answers, [questions[current].id]: selected });
    setSelected(null);
    
    if (current < questions.length - 1) {
      setCurrent(current + 1);
      setTimeLeft(60);
    } else {
      setFinished(true);
      setShowResults(true);
    }
  };

  const resetQuiz = () => {
    setCurrent(0);
    setSelected(null);
    setAnswers({});
    setTimeLeft(60);
    setFinished(false);
    setIsStarted(false);
    setTimeUp(false);
    setShowResults(false);
  };

  const score = Object.keys(answers).filter(
    (id) =>
      answers[id] === questions.find((q) => q.id.toString() === id)?.answer
  ).length;

  const progressPercentage = ((current + 1) / questions.length) * 100;

  // Welcome Screen
  if (!isStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-black flex items-center justify-center p-4 relative overflow-hidden">
        {/* Animated Background */}
        <div className="absolute inset-0">
          <div className="absolute top-20 left-20 w-72 h-72 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
          <div className="absolute top-40 right-20 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
          <div className="absolute -bottom-8 left-40 w-72 h-72 bg-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
        </div>

        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="relative z-10 text-center max-w-2xl mx-auto"
        >
          {/* Logo/Icon */}
          <motion.div
            initial={{ y: -50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.6 }}
            className="mb-8"
          >
            <div className="w-24 h-24 mx-auto bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mb-6 shadow-2xl">
              <svg className="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M9.504 1.132a1 1 0 01.992 0l1.75 1a1 1 0 11-.992 1.736L10 3.152l-1.254.716a1 1 0 11-.992-1.736l1.75-1zM5.618 4.504a1 1 0 01-.372 1.364L5.016 6l.23.132a1 1 0 11-.992 1.736L3 7.723V8a1 1 0 01-2 0V6a.996.996 0 01.52-.878l1.734-.99a1 1 0 011.364.372zm8.764 0a1 1 0 011.364-.372l1.734.99A.996.996 0 0118 6v2a1 1 0 11-2 0v-.277l-1.254.145a1 1 0 11-.992-1.736L14.984 6l-.23-.132a1 1 0 01-.372-1.364zm-7 4a1 1 0 011.364-.372L10 8.848l1.254-.716a1 1 0 11.992 1.736L11 10.723V12a1 1 0 11-2 0v-1.277l-1.246-.855a1 1 0 01-.372-1.364zM3 11a1 1 0 011 1v1.277l1.246.855a1 1 0 01-.372 1.364l-1.75-1A.996.996 0 013 14v-2a1 1 0 011-1zm14 0a1 1 0 011 1v2a.996.996 0 01-.52.878l-1.75 1a1 1 0 11-.372-1.364L16.984 14 16 13.277V12a1 1 0 011-1zm-9.618 5.504a1 1 0 011.364.372l.254.145V16a1 1 0 112 0v1.021l.254-.145a1 1 0 11.992 1.736l-1.735.992a.995.995 0 01-1.022 0l-1.735-.992a1 1 0 01-.372-1.364z" clipRule="evenodd" />
              </svg>
            </div>
          </motion.div>

          {/* Title */}
          <motion.h1
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.4, duration: 0.6 }}
            className="text-5xl md:text-6xl font-black text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600 mb-4"
          >
            OpenAI Agents SDK
          </motion.h1>
          
          <motion.h2
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.6, duration: 0.6 }}
            className="text-2xl md:text-3xl font-bold text-white mb-6"
          >
            Quiz Challenge
          </motion.h2>

          {/* Description */}
          <motion.p
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.8, duration: 0.6 }}
            className="text-gray-300 text-lg md:text-xl mb-8 leading-relaxed"
          >
            Test your knowledge about AI development, web technologies, and OpenAI SDK fundamentals
          </motion.p>

          {/* Stats */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 1, duration: 0.6 }}
            className="grid grid-cols-3 gap-6 mb-10"
          >
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-400">{questions.length}</div>
              <div className="text-gray-400 text-sm">Questions</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-400">60s</div>
              <div className="text-gray-400 text-sm">Per Question</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-400">20min</div>
              <div className="text-gray-400 text-sm">Total Time</div>
            </div>
          </motion.div>

          {/* Start Button */}
          <motion.button
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 1.2, duration: 0.6 }}
            whileHover={{ scale: 1.05, boxShadow: "0 20px 40px rgba(59, 130, 246, 0.4)" }}
            whileTap={{ scale: 0.95 }}
            onClick={handleStart}
            className="px-12 py-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xl font-bold rounded-2xl shadow-2xl hover:from-blue-600 hover:to-blue-700 transition-all duration-300 transform"
          >
            Start Quiz →
          </motion.button>

          {/* Credits */}
          <motion.p
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 1.4, duration: 0.6 }}
            className="text-gray-500 text-sm mt-8"
          >
            Developed by <span className="font-semibold text-blue-400">NeuraForge</span> • 
            Ahmed Memon & Kamran Tasleem
          </motion.p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-black p-4 md:p-6 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-20 left-20 w-64 h-64 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse"></div>
        <div className="absolute bottom-20 right-20 w-64 h-64 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse" style={{animationDelay: '1s'}}></div>
      </div>

      <div className="relative z-10 max-w-4xl mx-auto">
        <AnimatePresence mode="wait">
          {!showResults ? (
            <motion.div
              key="quiz"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -50 }}
              transition={{ duration: 0.5 }}
              className="bg-gradient-to-r from-slate-800/90 to-slate-900/90 backdrop-blur-xl shadow-2xl rounded-3xl p-6 md:p-8 border border-slate-700"
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-2xl md:text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600">
                    OpenAI Agents SDK Quiz
                  </h1>
                  <p className="text-gray-400 mt-1">Question {current + 1} of {questions.length}</p>
                </div>
                
                {/* Timer */}
                <motion.div
                  animate={timeUp ? { scale: [1, 1.2, 1] } : {}}
                  transition={{ duration: 0.5 }}
                  className={`flex items-center gap-3 px-4 py-3 rounded-2xl font-bold text-lg ${
                    timeLeft <= 10 ? 'bg-red-500/20 text-red-400 border border-red-500/30' : 
                    timeLeft <= 20 ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' :
                    'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                  }`}
                >
                  <motion.div
                    animate={{ rotate: timeLeft <= 10 ? [0, 10, -10, 0] : 0 }}
                    transition={{ duration: 0.5, repeat: timeLeft <= 10 ? Infinity : 0 }}
                  >
                    ⏰
                  </motion.div>
                  {timeLeft}s
                </motion.div>
              </div>

              {/* Progress Bar */}
              <div className="mb-8">
                <div className="w-full bg-slate-700 rounded-full h-3 overflow-hidden">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: `${progressPercentage}%` }}
                    transition={{ duration: 0.5 }}
                    className="h-full bg-gradient-to-r from-blue-500 to-blue-600 rounded-full"
                  />
                </div>
                <p className="text-gray-400 text-sm mt-2">{Math.round(progressPercentage)}% Complete</p>
              </div>

              {/* Time Up Message */}
              <AnimatePresence>
                {timeUp && (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.8 }}
                    className="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-2xl text-center"
                  >
                    <p className="text-red-400 font-semibold text-lg">⏰ Time's Up!</p>
                    <p className="text-gray-300 text-sm mt-1">Moving to next question...</p>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Question */}
              <motion.div
                key={current}
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5 }}
                className="mb-8"
              >
                <h2 className="text-xl md:text-2xl font-semibold text-white mb-6 leading-relaxed">
                  {questions[current].question}
                </h2>

                {/* Options */}
                <div className="space-y-4">
                  {questions[current].options.map((option, idx) => (
                    <motion.button
                      key={idx}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: idx * 0.1, duration: 0.3 }}
                      whileHover={{ scale: 1.02, x: 8 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => !timeUp && setSelected(option)}
                      disabled={timeUp}
                      className={`w-full text-left px-6 py-4 rounded-2xl border transition-all duration-300 ${
                        selected === option
                          ? "bg-gradient-to-r from-blue-500/30 to-blue-600/30 border-blue-400 text-white shadow-lg shadow-blue-500/25"
                          : timeUp
                          ? "border-slate-600 bg-slate-800/50 text-gray-500 cursor-not-allowed"
                          : "border-slate-600 bg-slate-800/50 text-gray-300 hover:bg-slate-700/50 hover:border-slate-500"
                      }`}
                    >
                      <div className="flex items-center gap-4">
                        <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                          selected === option ? 'border-blue-400 bg-blue-500' : 'border-gray-500'
                        }`}>
                          {selected === option && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="w-3 h-3 bg-white rounded-full"
                            />
                          )}
                        </div>
                        <span className="font-medium">{option}</span>
                      </div>
                    </motion.button>
                  ))}
                </div>
              </motion.div>

              {/* Confirm Button */}
              {!timeUp && (
                <div className="flex justify-end">
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    disabled={!selected}
                    onClick={handleConfirm}
                    className={`px-8 py-4 rounded-2xl font-bold text-lg transition-all duration-300 ${
                      selected
                        ? "bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/25 hover:from-blue-600 hover:to-blue-700"
                        : "bg-slate-700 text-gray-500 cursor-not-allowed"
                    }`}
                  >
                    {current < questions.length - 1 ? "Next Question →" : "Finish Quiz"}
                  </motion.button>
                </div>
              )}
            </motion.div>
          ) : (
            /* Results Screen */
            <motion.div
              key="results"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="bg-gradient-to-r from-slate-800/90 to-slate-900/90 backdrop-blur-xl shadow-2xl rounded-3xl p-6 md:p-8 border border-slate-700"
            >
              {/* Results Header */}
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, duration: 0.5 }}
                  className="text-6xl mb-4"
                >
                  {score >= questions.length * 0.7 ? "🎉" : score >= questions.length * 0.5 ? "👍" : "😅"}
                </motion.div>
                
                <h2 className="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600 mb-2">
                  Quiz Complete!
                </h2>
                
                <div className="text-center mb-8">
                  <div className={`inline-block px-6 py-3 rounded-2xl text-2xl font-bold ${
                    score >= questions.length * 0.7 ? 'bg-green-500/20 text-green-400 border border-green-500/30' :
                    score >= questions.length * 0.5 ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' :
                    'bg-red-500/20 text-red-400 border border-red-500/30'
                  }`}>
                    Score: {score}/{questions.length}
                  </div>
                  <p className={`mt-3 text-lg font-semibold ${
                    score >= questions.length * 0.7 ? 'text-green-400' :
                    score >= questions.length * 0.5 ? 'text-yellow-400' :
                    'text-red-400'
                  }`}>
                    {score >= questions.length * 0.7 ? '🌟 Excellent!' :
                     score >= questions.length * 0.5 ? '✅ Good Job!' :
                     '💪 Keep Learning!'}
                  </p>
                </div>
              </div>

              {/* Detailed Results */}
              <div className="space-y-4 mb-8 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-blue-500 scrollbar-track-slate-700">
                {questions.map((q, index) => {
                  const userAnswer = answers[q.id];
                  const isCorrect = userAnswer === q.answer;
                  
                  return (
                    <motion.div
                      key={q.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1, duration: 0.3 }}
                      className={`p-5 rounded-2xl border ${
                        isCorrect 
                          ? 'bg-green-500/10 border-green-500/30' 
                          : 'bg-red-500/10 border-red-500/30'
                      }`}
                    >
                      <div className="flex items-start gap-4">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                          isCorrect ? 'bg-green-500' : 'bg-red-500'
                        }`}>
                          {isCorrect ? '✓' : '✗'}
                        </div>
                        <div className="flex-1">
                          <p className="text-white font-semibold mb-2">{q.question}</p>
                          <div className="space-y-1 text-sm">
                            <p className="text-gray-300">
                              Your Answer: <span className={isCorrect ? 'text-green-400' : 'text-red-400'}>
                                {userAnswer || "Not Answered"}
                              </span>
                            </p>
                            {!isCorrect && (
                              <p className="text-gray-300">
                                Correct Answer: <span className="text-green-400">{q.answer}</span>
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={resetQuiz}
                  className="px-8 py-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold text-lg rounded-2xl shadow-lg shadow-blue-500/25 hover:from-blue-600 hover:to-blue-700 transition-all duration-300"
                >
                  Retake Quiz
                </motion.button>
                
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => window.location.reload()}
                  className="px-8 py-4 bg-slate-700 text-white font-bold text-lg rounded-2xl hover:bg-slate-600 transition-all duration-300"
                >
                  Start Over
                </motion.button>
              </div>

              {/* Credits */}
              <p className="text-gray-500 text-center text-sm mt-8">
                Developed by <span className="font-semibold text-blue-400">NeuraForge</span> • 
                Ahmed Memon & Kamran Tasleem
              </p>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <style jsx>{`
        @keyframes blob {
          0% { transform: translate(0px, 0px) scale(1); }
          33% { transform: translate(30px, -50px) scale(1.1); }
          66% { transform: translate(-20px, 20px) scale(0.9); }
          100% { transform: translate(0px, 0px) scale(1); }
        }
        .animate-blob {
          animation: blob 7s infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .scrollbar-thin::-webkit-scrollbar {
          width: 6px;
        }
        .scrollbar-thumb-blue-500::-webkit-scrollbar-thumb {
          background-color: rgb(59 130 246);
          border-radius: 3px;
        }
        .scrollbar-track-slate-700::-webkit-scrollbar-track {
          background-color: rgb(51 65 85);
          border-radius: 3px;
        }
      `}</style>
    </div>
  );
}
